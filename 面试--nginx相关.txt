1.请解释一下什么是 Nginx ？
	Nginx ，是一个 Web 服务器和反向代理服务器，用于 HTTP、HTTPS、SMTP、POP3 和 IMAP 协议。
	目前使用的最多的 Web 服务器或者代理服务器，像淘宝、新浪、网易、迅雷等都在使用。
	Nginx 的主要功能如下：
	作为 http server (代替 Apache ，对 PHP 需要 FastCGI 处理器支持)
	FastCGI：Nginx 本身不支持 PHP 等语言，但是它可以通过 FastCGI 来将请求扔给某些语言或框架处理。
	反向代理服务器
	实现负载均衡
	
2.fastcgi 与 cgi 的区别？
	1）cgi
	web 服务器会根据请求的内容，然后会 fork 一个新进程来运行外部 c 程序（或 perl 脚本…）， 这个进程会把处理完的数据返回给 web 服务器，最后 web 服务器把内容发送给用户，刚才 fork 的进程也随之退出。
	如果下次用户还请求改动态脚本，那么 web 服务器又再次 fork 一个新进程，周而复始的进行。

	2）fastcgi
	web 服务器收到一个请求时，他不会重新 fork 一个进程（因为这个进程在 web 服务器启动时就开启了，而且不会退出），
	web 服务器直接把内容传递给这个进程（进程间通信，但 fastcgi 使用了别的方式，tcp 方式通信），这个进程收到请求后进行处理，把结果返回给 web 服务器，最后自己接着等待下一个请求的到来，而不是退出。
	
3.Nginx 有哪些优点？
	跨平台、配置简单。
	非阻塞、高并发连接
	内存消耗小
	成本低廉，且开源。
	稳定性高，宕机的概率非常小。
	
4.使用“反向代理服务器”的优点是什么？
	反向代理服务器可以隐藏源服务器的存在和特征。它充当互联网云和 Web 服务器之间的中间层。这对于安全方面来说是很好的，特别是当我们使用 Web 托管服务时。
	
5.什么是正向代理？
	1.一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。
	2.客户端才能使用正向代理。
	3.正向代理总结就一句话：代理端代理的是客户端。例如说：? 我们使用的翻墙软件，OpenVPN 等等。
6.什么是反向代理？
	反向代理（Reverse Proxy）方式，是指以代理服务器来接受 Internet上的连接请求，然后将请求，发给内部网络上的服务器并将从服务器上得到的结果返回给 Internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。
	反向代理总结就一句话：代理端代理的是服务端。

7.请列举 Nginx 和 Apache 之间的不同点？
	1.Nginx 比 Apache 占用更少的内存及资源。
	2.抗并发，Nginx 处理请求是异步非阻塞的，而 Apache 则是阻塞型的，在高并发下 Nginx 能保持低资源低消耗高性能。
	3.最核心的区别在于 Apache 是同步多进程模型，一个连接对应一个进程；Nginx 是异步的，多个连接（万级别）可以对应一个进程。
	Nginx接收用户请求是异步的，即先将用户请求全部接收下来，再一次性发送到后端Web服务器，极大减轻后端Web服务器的压力。 
	
8.请解释 Nginx 如何处理 HTTP 请求？
	1.首先，Nginx 在启动时，会解析配置文件，得到需要监听的端口与 IP 地址，然后在 Nginx 的 Master 进程里面先初始化好这个监控的Socket(创建 S ocket，设置 addr、reuse 等选项，绑定到指定的 ip 地址端口，再 listen 监听)。
	2.然后，再 fork(一个现有进程可以调用 fork 函数创建一个新进程。由 fork 创建的新进程被称为子进程 )出多个子进程出来。
	3.之后，子进程会竞争 accept 新的连接。此时，客户端就可以向 nginx 发起连接了。当客户端与nginx进行三次握手，与 nginx 建立好一个连接后。
	此时，某一个子进程会 accept 成功，得到这个建立好的连接的 Socket ，然后创建 nginx 对连接的封装，即 ngx_connection_t 结构体。
	4.接着，设置读写事件处理函数，并添加读写事件来与客户端进行数据的交换。
	5.最后，Nginx 或客户端来主动关掉连接，到此，一个连接就寿终正寝了。
	
9.Nginx 有哪些负载均衡策略？
	负载均衡，即是代理服务器将接收的请求均衡的分发到各服务器中。
	1、轮询（默认）round_robin
		每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除。
	2、IP 哈希 ip_hash
		每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 共享的问题。
		当然，实际场景下，一般不考虑使用 ip_hash 解决 session 共享。
	3.最少连接 least_conn
		下一个请求将被分派到活动连接数量最少的服务器
		
10.线程和进程的区别是什么？
	1.线程在进程下行进（单纯的车厢无法运行）
	2.一个进程可以包含多个线程（一辆火车可以有多个车厢）
	3.不同进程间数据很难共享（一辆火车上的乘客很难换到另外一辆火车，比如站点换乘）
	4.同一进程下不同线程间数据很易共享（A车厢换到B车厢很容易）
	5.进程要比线程消耗更多的计算机资源（采用多列火车相比多个车厢更耗资源）
	6.进程间不会相互影响，一个线程挂掉将导致整个进程挂掉（一列火车不会影响到另外一列火车，但是如果一列火车上中间的一节车厢着火了，将影响到所有车厢）
	7.进程可以拓展到多机，进程最多适合多核（不同火车可以开在多个轨道上，同一火车的车厢不能在行进的不同的轨道上）
	8.进程使用的内存地址可以上锁，即一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。（比如火车上的洗手间）－"互斥锁"
	9.进程使用的内存地址可以限定使用量（比如火车上的餐厅，最多只允许多少人进入，如果满了需要在门口等，等有人出来了才能进去）－“信号量”
